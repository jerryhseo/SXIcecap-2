/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sx.icecap.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.GroupedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedAuditedModel;
import com.liferay.portal.kernel.model.TrashedModel;
import com.liferay.portal.kernel.model.WorkflowedModel;

import java.util.Date;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the StructuredData service. Represents a row in the &quot;SX_ICECAP_StructuredData&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>com.sx.icecap.model.impl.StructuredDataModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>com.sx.icecap.model.impl.StructuredDataImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StructuredData
 * @generated
 */
@ProviderType
public interface StructuredDataModel
	extends BaseModel<StructuredData>, GroupedModel, ShardedModel,
			StagedAuditedModel, TrashedModel, WorkflowedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a structured data model instance should use the {@link StructuredData} interface instead.
	 */

	/**
	 * Returns the primary key of this structured data.
	 *
	 * @return the primary key of this structured data
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this structured data.
	 *
	 * @param primaryKey the primary key of this structured data
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this structured data.
	 *
	 * @return the uuid of this structured data
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this structured data.
	 *
	 * @param uuid the uuid of this structured data
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the structured data ID of this structured data.
	 *
	 * @return the structured data ID of this structured data
	 */
	public long getStructuredDataId();

	/**
	 * Sets the structured data ID of this structured data.
	 *
	 * @param structuredDataId the structured data ID of this structured data
	 */
	public void setStructuredDataId(long structuredDataId);

	/**
	 * Returns the group ID of this structured data.
	 *
	 * @return the group ID of this structured data
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this structured data.
	 *
	 * @param groupId the group ID of this structured data
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this structured data.
	 *
	 * @return the company ID of this structured data
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this structured data.
	 *
	 * @param companyId the company ID of this structured data
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this structured data.
	 *
	 * @return the user ID of this structured data
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this structured data.
	 *
	 * @param userId the user ID of this structured data
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this structured data.
	 *
	 * @return the user uuid of this structured data
	 */
	@Override
	public String getUserUuid();

	/**
	 * Sets the user uuid of this structured data.
	 *
	 * @param userUuid the user uuid of this structured data
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this structured data.
	 *
	 * @return the user name of this structured data
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this structured data.
	 *
	 * @param userName the user name of this structured data
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this structured data.
	 *
	 * @return the create date of this structured data
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this structured data.
	 *
	 * @param createDate the create date of this structured data
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this structured data.
	 *
	 * @return the modified date of this structured data
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this structured data.
	 *
	 * @param modifiedDate the modified date of this structured data
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the status of this structured data.
	 *
	 * @return the status of this structured data
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this structured data.
	 *
	 * @param status the status of this structured data
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this structured data.
	 *
	 * @return the status by user ID of this structured data
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this structured data.
	 *
	 * @param statusByUserId the status by user ID of this structured data
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this structured data.
	 *
	 * @return the status by user uuid of this structured data
	 */
	@Override
	public String getStatusByUserUuid();

	/**
	 * Sets the status by user uuid of this structured data.
	 *
	 * @param statusByUserUuid the status by user uuid of this structured data
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this structured data.
	 *
	 * @return the status by user name of this structured data
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this structured data.
	 *
	 * @param statusByUserName the status by user name of this structured data
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this structured data.
	 *
	 * @return the status date of this structured data
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this structured data.
	 *
	 * @param statusDate the status date of this structured data
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the data collection ID of this structured data.
	 *
	 * @return the data collection ID of this structured data
	 */
	public long getDataCollectionId();

	/**
	 * Sets the data collection ID of this structured data.
	 *
	 * @param dataCollectionId the data collection ID of this structured data
	 */
	public void setDataCollectionId(long dataCollectionId);

	/**
	 * Returns the data set ID of this structured data.
	 *
	 * @return the data set ID of this structured data
	 */
	public long getDataSetId();

	/**
	 * Sets the data set ID of this structured data.
	 *
	 * @param dataSetId the data set ID of this structured data
	 */
	public void setDataSetId(long dataSetId);

	/**
	 * Returns the data type ID of this structured data.
	 *
	 * @return the data type ID of this structured data
	 */
	public long getDataTypeId();

	/**
	 * Sets the data type ID of this structured data.
	 *
	 * @param dataTypeId the data type ID of this structured data
	 */
	public void setDataTypeId(long dataTypeId);

	/**
	 * Returns the multiple of this structured data.
	 *
	 * @return the multiple of this structured data
	 */
	public boolean getMultiple();

	/**
	 * Returns <code>true</code> if this structured data is multiple.
	 *
	 * @return <code>true</code> if this structured data is multiple; <code>false</code> otherwise
	 */
	public boolean isMultiple();

	/**
	 * Sets whether this structured data is multiple.
	 *
	 * @param multiple the multiple of this structured data
	 */
	public void setMultiple(boolean multiple);

	/**
	 * Returns the start index of this structured data.
	 *
	 * @return the start index of this structured data
	 */
	public long getStartIndex();

	/**
	 * Sets the start index of this structured data.
	 *
	 * @param startIndex the start index of this structured data
	 */
	public void setStartIndex(long startIndex);

	/**
	 * Returns the count of this structured data.
	 *
	 * @return the count of this structured data
	 */
	public int getCount();

	/**
	 * Sets the count of this structured data.
	 *
	 * @param count the count of this structured data
	 */
	public void setCount(int count);

	/**
	 * Returns the freezed of this structured data.
	 *
	 * @return the freezed of this structured data
	 */
	public boolean getFreezed();

	/**
	 * Returns <code>true</code> if this structured data is freezed.
	 *
	 * @return <code>true</code> if this structured data is freezed; <code>false</code> otherwise
	 */
	public boolean isFreezed();

	/**
	 * Sets whether this structured data is freezed.
	 *
	 * @param freezed the freezed of this structured data
	 */
	public void setFreezed(boolean freezed);

	/**
	 * Returns the verified of this structured data.
	 *
	 * @return the verified of this structured data
	 */
	public boolean getVerified();

	/**
	 * Returns <code>true</code> if this structured data is verified.
	 *
	 * @return <code>true</code> if this structured data is verified; <code>false</code> otherwise
	 */
	public boolean isVerified();

	/**
	 * Sets whether this structured data is verified.
	 *
	 * @param verified the verified of this structured data
	 */
	public void setVerified(boolean verified);

	/**
	 * Returns the data of this structured data.
	 *
	 * @return the data of this structured data
	 */
	@AutoEscape
	public String getData();

	/**
	 * Sets the data of this structured data.
	 *
	 * @param data the data of this structured data
	 */
	public void setData(String data);

	/**
	 * Returns the trash entry created when this structured data was moved to the Recycle Bin. The trash entry may belong to one of the ancestors of this structured data.
	 *
	 * @return the trash entry created when this structured data was moved to the Recycle Bin
	 */
	@Override
	public com.liferay.trash.kernel.model.TrashEntry getTrashEntry()
		throws PortalException;

	/**
	 * Returns the class primary key of the trash entry for this structured data.
	 *
	 * @return the class primary key of the trash entry for this structured data
	 */
	@Override
	public long getTrashEntryClassPK();

	/**
	 * Returns the trash handler for this structured data.
	 *
	 * @return the trash handler for this structured data
	 * @deprecated As of Judson (7.1.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public com.liferay.portal.kernel.trash.TrashHandler getTrashHandler();

	/**
	 * Returns <code>true</code> if this structured data is in the Recycle Bin.
	 *
	 * @return <code>true</code> if this structured data is in the Recycle Bin; <code>false</code> otherwise
	 */
	@Override
	public boolean isInTrash();

	/**
	 * Returns <code>true</code> if the parent of this structured data is in the Recycle Bin.
	 *
	 * @return <code>true</code> if the parent of this structured data is in the Recycle Bin; <code>false</code> otherwise
	 */
	@Override
	public boolean isInTrashContainer();

	@Override
	public boolean isInTrashExplicitly();

	@Override
	public boolean isInTrashImplicitly();

	/**
	 * Returns <code>true</code> if this structured data is approved.
	 *
	 * @return <code>true</code> if this structured data is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this structured data is denied.
	 *
	 * @return <code>true</code> if this structured data is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this structured data is a draft.
	 *
	 * @return <code>true</code> if this structured data is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this structured data is expired.
	 *
	 * @return <code>true</code> if this structured data is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this structured data is inactive.
	 *
	 * @return <code>true</code> if this structured data is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this structured data is incomplete.
	 *
	 * @return <code>true</code> if this structured data is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this structured data is pending.
	 *
	 * @return <code>true</code> if this structured data is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this structured data is scheduled.
	 *
	 * @return <code>true</code> if this structured data is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

}