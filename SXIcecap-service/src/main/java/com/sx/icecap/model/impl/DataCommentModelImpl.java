/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sx.icecap.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.sx.icecap.model.DataComment;
import com.sx.icecap.model.DataCommentModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DataComment service. Represents a row in the &quot;SX_ICECAP_DataComment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DataCommentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataCommentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DataCommentImpl
 * @generated
 */
public class DataCommentModelImpl
	extends BaseModelImpl<DataComment> implements DataCommentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a data comment model instance should use the <code>DataComment</code> interface instead.
	 */
	public static final String TABLE_NAME = "SX_ICECAP_DataComment";

	public static final Object[][] TABLE_COLUMNS = {
		{"dataCommentId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"commentModel", Types.VARCHAR},
		{"commentModelId", Types.BIGINT}, {"parentCommentId", Types.BIGINT},
		{"comment_", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("dataCommentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("commentModel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commentModelId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("parentCommentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("comment_", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SX_ICECAP_DataComment (dataCommentId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,commentModel VARCHAR(75) null,commentModelId LONG,parentCommentId LONG,comment_ VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table SX_ICECAP_DataComment";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dataComment.dataCommentId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SX_ICECAP_DataComment.dataCommentId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMMENTMODEL_COLUMN_BITMASK = 1L;

	public static final long COMMENTMODELID_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long PARENTCOMMENTID_COLUMN_BITMASK = 8L;

	public static final long DATACOMMENTID_COLUMN_BITMASK = 16L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public DataCommentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dataCommentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDataCommentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dataCommentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DataComment.class;
	}

	@Override
	public String getModelClassName() {
		return DataComment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DataComment, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DataComment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataComment, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DataComment)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DataComment, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DataComment, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DataComment)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DataComment, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DataComment, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<DataComment, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DataComment, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DataComment, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<DataComment, Object>>();
		Map<String, BiConsumer<DataComment, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<DataComment, ?>>();

		attributeGetterFunctions.put(
			"dataCommentId", DataComment::getDataCommentId);
		attributeSetterBiConsumers.put(
			"dataCommentId",
			(BiConsumer<DataComment, Long>)DataComment::setDataCommentId);
		attributeGetterFunctions.put("companyId", DataComment::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<DataComment, Long>)DataComment::setCompanyId);
		attributeGetterFunctions.put("groupId", DataComment::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<DataComment, Long>)DataComment::setGroupId);
		attributeGetterFunctions.put("userId", DataComment::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<DataComment, Long>)DataComment::setUserId);
		attributeGetterFunctions.put("userName", DataComment::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<DataComment, String>)DataComment::setUserName);
		attributeGetterFunctions.put("createDate", DataComment::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<DataComment, Date>)DataComment::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", DataComment::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<DataComment, Date>)DataComment::setModifiedDate);
		attributeGetterFunctions.put(
			"commentModel", DataComment::getCommentModel);
		attributeSetterBiConsumers.put(
			"commentModel",
			(BiConsumer<DataComment, String>)DataComment::setCommentModel);
		attributeGetterFunctions.put(
			"commentModelId", DataComment::getCommentModelId);
		attributeSetterBiConsumers.put(
			"commentModelId",
			(BiConsumer<DataComment, Long>)DataComment::setCommentModelId);
		attributeGetterFunctions.put(
			"parentCommentId", DataComment::getParentCommentId);
		attributeSetterBiConsumers.put(
			"parentCommentId",
			(BiConsumer<DataComment, Long>)DataComment::setParentCommentId);
		attributeGetterFunctions.put("comment", DataComment::getComment);
		attributeSetterBiConsumers.put(
			"comment",
			(BiConsumer<DataComment, String>)DataComment::setComment);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getDataCommentId() {
		return _dataCommentId;
	}

	@Override
	public void setDataCommentId(long dataCommentId) {
		_dataCommentId = dataCommentId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getCommentModel() {
		if (_commentModel == null) {
			return "";
		}
		else {
			return _commentModel;
		}
	}

	@Override
	public void setCommentModel(String commentModel) {
		_columnBitmask |= COMMENTMODEL_COLUMN_BITMASK;

		if (_originalCommentModel == null) {
			_originalCommentModel = _commentModel;
		}

		_commentModel = commentModel;
	}

	public String getOriginalCommentModel() {
		return GetterUtil.getString(_originalCommentModel);
	}

	@Override
	public long getCommentModelId() {
		return _commentModelId;
	}

	@Override
	public void setCommentModelId(long commentModelId) {
		_columnBitmask |= COMMENTMODELID_COLUMN_BITMASK;

		if (!_setOriginalCommentModelId) {
			_setOriginalCommentModelId = true;

			_originalCommentModelId = _commentModelId;
		}

		_commentModelId = commentModelId;
	}

	public long getOriginalCommentModelId() {
		return _originalCommentModelId;
	}

	@Override
	public long getParentCommentId() {
		return _parentCommentId;
	}

	@Override
	public void setParentCommentId(long parentCommentId) {
		_columnBitmask |= PARENTCOMMENTID_COLUMN_BITMASK;

		if (!_setOriginalParentCommentId) {
			_setOriginalParentCommentId = true;

			_originalParentCommentId = _parentCommentId;
		}

		_parentCommentId = parentCommentId;
	}

	public long getOriginalParentCommentId() {
		return _originalParentCommentId;
	}

	@Override
	public String getComment() {
		if (_comment == null) {
			return "";
		}
		else {
			return _comment;
		}
	}

	@Override
	public void setComment(String comment) {
		_comment = comment;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), DataComment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DataComment toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DataComment>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DataCommentImpl dataCommentImpl = new DataCommentImpl();

		dataCommentImpl.setDataCommentId(getDataCommentId());
		dataCommentImpl.setCompanyId(getCompanyId());
		dataCommentImpl.setGroupId(getGroupId());
		dataCommentImpl.setUserId(getUserId());
		dataCommentImpl.setUserName(getUserName());
		dataCommentImpl.setCreateDate(getCreateDate());
		dataCommentImpl.setModifiedDate(getModifiedDate());
		dataCommentImpl.setCommentModel(getCommentModel());
		dataCommentImpl.setCommentModelId(getCommentModelId());
		dataCommentImpl.setParentCommentId(getParentCommentId());
		dataCommentImpl.setComment(getComment());

		dataCommentImpl.resetOriginalValues();

		return dataCommentImpl;
	}

	@Override
	public int compareTo(DataComment dataComment) {
		long primaryKey = dataComment.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DataComment)) {
			return false;
		}

		DataComment dataComment = (DataComment)object;

		long primaryKey = dataComment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalGroupId = _groupId;

		_setOriginalGroupId = false;

		_setModifiedDate = false;
		_originalCommentModel = _commentModel;

		_originalCommentModelId = _commentModelId;

		_setOriginalCommentModelId = false;

		_originalParentCommentId = _parentCommentId;

		_setOriginalParentCommentId = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DataComment> toCacheModel() {
		DataCommentCacheModel dataCommentCacheModel =
			new DataCommentCacheModel();

		dataCommentCacheModel.dataCommentId = getDataCommentId();

		dataCommentCacheModel.companyId = getCompanyId();

		dataCommentCacheModel.groupId = getGroupId();

		dataCommentCacheModel.userId = getUserId();

		dataCommentCacheModel.userName = getUserName();

		String userName = dataCommentCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			dataCommentCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			dataCommentCacheModel.createDate = createDate.getTime();
		}
		else {
			dataCommentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dataCommentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dataCommentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dataCommentCacheModel.commentModel = getCommentModel();

		String commentModel = dataCommentCacheModel.commentModel;

		if ((commentModel != null) && (commentModel.length() == 0)) {
			dataCommentCacheModel.commentModel = null;
		}

		dataCommentCacheModel.commentModelId = getCommentModelId();

		dataCommentCacheModel.parentCommentId = getParentCommentId();

		dataCommentCacheModel.comment = getComment();

		String comment = dataCommentCacheModel.comment;

		if ((comment != null) && (comment.length() == 0)) {
			dataCommentCacheModel.comment = null;
		}

		return dataCommentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DataComment, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DataComment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataComment, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((DataComment)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DataComment, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DataComment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataComment, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DataComment)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DataComment>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					DataComment.class, ModelWrapper.class);

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _dataCommentId;
	private long _companyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _commentModel;
	private String _originalCommentModel;
	private long _commentModelId;
	private long _originalCommentModelId;
	private boolean _setOriginalCommentModelId;
	private long _parentCommentId;
	private long _originalParentCommentId;
	private boolean _setOriginalParentCommentId;
	private String _comment;
	private long _columnBitmask;
	private DataComment _escapedModel;

}