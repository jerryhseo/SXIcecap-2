/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sx.icecap.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.sx.icecap.model.StructureParamLink;
import com.sx.icecap.model.StructureParamLinkModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the StructureParamLink service. Represents a row in the &quot;SX_ICECAP_StructureParamLink&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StructureParamLinkModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StructureParamLinkImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StructureParamLinkImpl
 * @generated
 */
public class StructureParamLinkModelImpl
	extends BaseModelImpl<StructureParamLink>
	implements StructureParamLinkModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a structure param link model instance should use the <code>StructureParamLink</code> interface instead.
	 */
	public static final String TABLE_NAME = "SX_ICECAP_StructureParamLink";

	public static final Object[][] TABLE_COLUMNS = {
		{"structureParamLinkId", Types.BIGINT},
		{"dataStructureId", Types.BIGINT}, {"parameterId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("structureParamLinkId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataStructureId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("parameterId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SX_ICECAP_StructureParamLink (structureParamLinkId LONG not null primary key,dataStructureId LONG,parameterId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table SX_ICECAP_StructureParamLink";

	public static final String ORDER_BY_JPQL =
		" ORDER BY structureParamLink.structureParamLinkId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SX_ICECAP_StructureParamLink.structureParamLinkId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long DATASTRUCTUREID_COLUMN_BITMASK = 1L;

	public static final long PARAMETERID_COLUMN_BITMASK = 2L;

	public static final long STRUCTUREPARAMLINKID_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public StructureParamLinkModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _structureParamLinkId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStructureParamLinkId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _structureParamLinkId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StructureParamLink.class;
	}

	@Override
	public String getModelClassName() {
		return StructureParamLink.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<StructureParamLink, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<StructureParamLink, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StructureParamLink, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((StructureParamLink)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<StructureParamLink, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<StructureParamLink, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(StructureParamLink)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<StructureParamLink, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<StructureParamLink, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<StructureParamLink, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<StructureParamLink, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<StructureParamLink, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<StructureParamLink, Object>>();
		Map<String, BiConsumer<StructureParamLink, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<StructureParamLink, ?>>();

		attributeGetterFunctions.put(
			"structureParamLinkId",
			StructureParamLink::getStructureParamLinkId);
		attributeSetterBiConsumers.put(
			"structureParamLinkId",
			(BiConsumer<StructureParamLink, Long>)
				StructureParamLink::setStructureParamLinkId);
		attributeGetterFunctions.put(
			"dataStructureId", StructureParamLink::getDataStructureId);
		attributeSetterBiConsumers.put(
			"dataStructureId",
			(BiConsumer<StructureParamLink, Long>)
				StructureParamLink::setDataStructureId);
		attributeGetterFunctions.put(
			"parameterId", StructureParamLink::getParameterId);
		attributeSetterBiConsumers.put(
			"parameterId",
			(BiConsumer<StructureParamLink, Long>)
				StructureParamLink::setParameterId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getStructureParamLinkId() {
		return _structureParamLinkId;
	}

	@Override
	public void setStructureParamLinkId(long structureParamLinkId) {
		_structureParamLinkId = structureParamLinkId;
	}

	@Override
	public long getDataStructureId() {
		return _dataStructureId;
	}

	@Override
	public void setDataStructureId(long dataStructureId) {
		_columnBitmask |= DATASTRUCTUREID_COLUMN_BITMASK;

		if (!_setOriginalDataStructureId) {
			_setOriginalDataStructureId = true;

			_originalDataStructureId = _dataStructureId;
		}

		_dataStructureId = dataStructureId;
	}

	public long getOriginalDataStructureId() {
		return _originalDataStructureId;
	}

	@Override
	public long getParameterId() {
		return _parameterId;
	}

	@Override
	public void setParameterId(long parameterId) {
		_columnBitmask |= PARAMETERID_COLUMN_BITMASK;

		if (!_setOriginalParameterId) {
			_setOriginalParameterId = true;

			_originalParameterId = _parameterId;
		}

		_parameterId = parameterId;
	}

	public long getOriginalParameterId() {
		return _originalParameterId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, StructureParamLink.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StructureParamLink toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, StructureParamLink>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StructureParamLinkImpl structureParamLinkImpl =
			new StructureParamLinkImpl();

		structureParamLinkImpl.setStructureParamLinkId(
			getStructureParamLinkId());
		structureParamLinkImpl.setDataStructureId(getDataStructureId());
		structureParamLinkImpl.setParameterId(getParameterId());

		structureParamLinkImpl.resetOriginalValues();

		return structureParamLinkImpl;
	}

	@Override
	public int compareTo(StructureParamLink structureParamLink) {
		long primaryKey = structureParamLink.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof StructureParamLink)) {
			return false;
		}

		StructureParamLink structureParamLink = (StructureParamLink)object;

		long primaryKey = structureParamLink.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalDataStructureId = _dataStructureId;

		_setOriginalDataStructureId = false;

		_originalParameterId = _parameterId;

		_setOriginalParameterId = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<StructureParamLink> toCacheModel() {
		StructureParamLinkCacheModel structureParamLinkCacheModel =
			new StructureParamLinkCacheModel();

		structureParamLinkCacheModel.structureParamLinkId =
			getStructureParamLinkId();

		structureParamLinkCacheModel.dataStructureId = getDataStructureId();

		structureParamLinkCacheModel.parameterId = getParameterId();

		return structureParamLinkCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<StructureParamLink, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<StructureParamLink, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StructureParamLink, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(StructureParamLink)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<StructureParamLink, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<StructureParamLink, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StructureParamLink, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((StructureParamLink)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, StructureParamLink>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					StructureParamLink.class, ModelWrapper.class);

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _structureParamLinkId;
	private long _dataStructureId;
	private long _originalDataStructureId;
	private boolean _setOriginalDataStructureId;
	private long _parameterId;
	private long _originalParameterId;
	private boolean _setOriginalParameterId;
	private long _columnBitmask;
	private StructureParamLink _escapedModel;

}