/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sx.icecap.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;

import com.sx.icecap.model.DisverifiedData;
import com.sx.icecap.model.DisverifiedDataModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DisverifiedData service. Represents a row in the &quot;SX_ICECAP_DisverifiedData&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DisverifiedDataModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DisverifiedDataImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DisverifiedDataImpl
 * @generated
 */
public class DisverifiedDataModelImpl
	extends BaseModelImpl<DisverifiedData> implements DisverifiedDataModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a disverified data model instance should use the <code>DisverifiedData</code> interface instead.
	 */
	public static final String TABLE_NAME = "SX_ICECAP_DisverifiedData";

	public static final Object[][] TABLE_COLUMNS = {
		{"disverifiedDataId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"status", Types.INTEGER},
		{"dataSetId", Types.BIGINT}, {"dataTypeId", Types.BIGINT},
		{"folderId", Types.BIGINT}, {"tempDataTitle", Types.VARCHAR},
		{"dataSetDisplayName", Types.VARCHAR},
		{"dataTypeDisplayName", Types.VARCHAR}, {"folderName", Types.VARCHAR},
		{"structuredData", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("disverifiedDataId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("dataSetId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("folderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tempDataTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dataSetDisplayName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dataTypeDisplayName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("folderName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("structuredData", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SX_ICECAP_DisverifiedData (disverifiedDataId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,dataSetId LONG,dataTypeId LONG,folderId LONG,tempDataTitle VARCHAR(75) null,dataSetDisplayName STRING null,dataTypeDisplayName STRING null,folderName STRING null,structuredData VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table SX_ICECAP_DisverifiedData";

	public static final String ORDER_BY_JPQL =
		" ORDER BY disverifiedData.disverifiedDataId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SX_ICECAP_DisverifiedData.disverifiedDataId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long DATASETID_COLUMN_BITMASK = 1L;

	public static final long DATATYPEID_COLUMN_BITMASK = 2L;

	public static final long FOLDERID_COLUMN_BITMASK = 4L;

	public static final long GROUPID_COLUMN_BITMASK = 8L;

	public static final long STATUS_COLUMN_BITMASK = 16L;

	public static final long USERID_COLUMN_BITMASK = 32L;

	public static final long DISVERIFIEDDATAID_COLUMN_BITMASK = 64L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public DisverifiedDataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _disverifiedDataId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDisverifiedDataId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _disverifiedDataId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DisverifiedData.class;
	}

	@Override
	public String getModelClassName() {
		return DisverifiedData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DisverifiedData, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DisverifiedData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DisverifiedData, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DisverifiedData)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DisverifiedData, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DisverifiedData, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DisverifiedData)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DisverifiedData, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DisverifiedData, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, DisverifiedData>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			DisverifiedData.class.getClassLoader(), DisverifiedData.class,
			ModelWrapper.class);

		try {
			Constructor<DisverifiedData> constructor =
				(Constructor<DisverifiedData>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<DisverifiedData, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DisverifiedData, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DisverifiedData, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<DisverifiedData, Object>>();
		Map<String, BiConsumer<DisverifiedData, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<DisverifiedData, ?>>();

		attributeGetterFunctions.put(
			"disverifiedDataId", DisverifiedData::getDisverifiedDataId);
		attributeSetterBiConsumers.put(
			"disverifiedDataId",
			(BiConsumer<DisverifiedData, Long>)
				DisverifiedData::setDisverifiedDataId);
		attributeGetterFunctions.put("groupId", DisverifiedData::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<DisverifiedData, Long>)DisverifiedData::setGroupId);
		attributeGetterFunctions.put(
			"companyId", DisverifiedData::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<DisverifiedData, Long>)DisverifiedData::setCompanyId);
		attributeGetterFunctions.put("userId", DisverifiedData::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<DisverifiedData, Long>)DisverifiedData::setUserId);
		attributeGetterFunctions.put("userName", DisverifiedData::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<DisverifiedData, String>)DisverifiedData::setUserName);
		attributeGetterFunctions.put(
			"createDate", DisverifiedData::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<DisverifiedData, Date>)DisverifiedData::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", DisverifiedData::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<DisverifiedData, Date>)
				DisverifiedData::setModifiedDate);
		attributeGetterFunctions.put("status", DisverifiedData::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<DisverifiedData, Integer>)DisverifiedData::setStatus);
		attributeGetterFunctions.put(
			"dataSetId", DisverifiedData::getDataSetId);
		attributeSetterBiConsumers.put(
			"dataSetId",
			(BiConsumer<DisverifiedData, Long>)DisverifiedData::setDataSetId);
		attributeGetterFunctions.put(
			"dataTypeId", DisverifiedData::getDataTypeId);
		attributeSetterBiConsumers.put(
			"dataTypeId",
			(BiConsumer<DisverifiedData, Long>)DisverifiedData::setDataTypeId);
		attributeGetterFunctions.put("folderId", DisverifiedData::getFolderId);
		attributeSetterBiConsumers.put(
			"folderId",
			(BiConsumer<DisverifiedData, Long>)DisverifiedData::setFolderId);
		attributeGetterFunctions.put(
			"tempDataTitle", DisverifiedData::getTempDataTitle);
		attributeSetterBiConsumers.put(
			"tempDataTitle",
			(BiConsumer<DisverifiedData, String>)
				DisverifiedData::setTempDataTitle);
		attributeGetterFunctions.put(
			"dataSetDisplayName", DisverifiedData::getDataSetDisplayName);
		attributeSetterBiConsumers.put(
			"dataSetDisplayName",
			(BiConsumer<DisverifiedData, String>)
				DisverifiedData::setDataSetDisplayName);
		attributeGetterFunctions.put(
			"dataTypeDisplayName", DisverifiedData::getDataTypeDisplayName);
		attributeSetterBiConsumers.put(
			"dataTypeDisplayName",
			(BiConsumer<DisverifiedData, String>)
				DisverifiedData::setDataTypeDisplayName);
		attributeGetterFunctions.put(
			"folderName", DisverifiedData::getFolderName);
		attributeSetterBiConsumers.put(
			"folderName",
			(BiConsumer<DisverifiedData, String>)
				DisverifiedData::setFolderName);
		attributeGetterFunctions.put(
			"structuredData", DisverifiedData::getStructuredData);
		attributeSetterBiConsumers.put(
			"structuredData",
			(BiConsumer<DisverifiedData, String>)
				DisverifiedData::setStructuredData);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getDisverifiedDataId() {
		return _disverifiedDataId;
	}

	@Override
	public void setDisverifiedDataId(long disverifiedDataId) {
		_disverifiedDataId = disverifiedDataId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@Override
	public long getDataSetId() {
		return _dataSetId;
	}

	@Override
	public void setDataSetId(long dataSetId) {
		_columnBitmask |= DATASETID_COLUMN_BITMASK;

		if (!_setOriginalDataSetId) {
			_setOriginalDataSetId = true;

			_originalDataSetId = _dataSetId;
		}

		_dataSetId = dataSetId;
	}

	public long getOriginalDataSetId() {
		return _originalDataSetId;
	}

	@Override
	public long getDataTypeId() {
		return _dataTypeId;
	}

	@Override
	public void setDataTypeId(long dataTypeId) {
		_columnBitmask |= DATATYPEID_COLUMN_BITMASK;

		if (!_setOriginalDataTypeId) {
			_setOriginalDataTypeId = true;

			_originalDataTypeId = _dataTypeId;
		}

		_dataTypeId = dataTypeId;
	}

	public long getOriginalDataTypeId() {
		return _originalDataTypeId;
	}

	@Override
	public long getFolderId() {
		return _folderId;
	}

	@Override
	public void setFolderId(long folderId) {
		_columnBitmask |= FOLDERID_COLUMN_BITMASK;

		if (!_setOriginalFolderId) {
			_setOriginalFolderId = true;

			_originalFolderId = _folderId;
		}

		_folderId = folderId;
	}

	public long getOriginalFolderId() {
		return _originalFolderId;
	}

	@Override
	public String getTempDataTitle() {
		if (_tempDataTitle == null) {
			return "";
		}
		else {
			return _tempDataTitle;
		}
	}

	@Override
	public void setTempDataTitle(String tempDataTitle) {
		_tempDataTitle = tempDataTitle;
	}

	@Override
	public String getDataSetDisplayName() {
		if (_dataSetDisplayName == null) {
			return "";
		}
		else {
			return _dataSetDisplayName;
		}
	}

	@Override
	public String getDataSetDisplayName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDataSetDisplayName(languageId);
	}

	@Override
	public String getDataSetDisplayName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDataSetDisplayName(languageId, useDefault);
	}

	@Override
	public String getDataSetDisplayName(String languageId) {
		return LocalizationUtil.getLocalization(
			getDataSetDisplayName(), languageId);
	}

	@Override
	public String getDataSetDisplayName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getDataSetDisplayName(), languageId, useDefault);
	}

	@Override
	public String getDataSetDisplayNameCurrentLanguageId() {
		return _dataSetDisplayNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDataSetDisplayNameCurrentValue() {
		Locale locale = getLocale(_dataSetDisplayNameCurrentLanguageId);

		return getDataSetDisplayName(locale);
	}

	@Override
	public Map<Locale, String> getDataSetDisplayNameMap() {
		return LocalizationUtil.getLocalizationMap(getDataSetDisplayName());
	}

	@Override
	public void setDataSetDisplayName(String dataSetDisplayName) {
		_dataSetDisplayName = dataSetDisplayName;
	}

	@Override
	public void setDataSetDisplayName(
		String dataSetDisplayName, Locale locale) {

		setDataSetDisplayName(
			dataSetDisplayName, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDataSetDisplayName(
		String dataSetDisplayName, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(dataSetDisplayName)) {
			setDataSetDisplayName(
				LocalizationUtil.updateLocalization(
					getDataSetDisplayName(), "DataSetDisplayName",
					dataSetDisplayName, languageId, defaultLanguageId));
		}
		else {
			setDataSetDisplayName(
				LocalizationUtil.removeLocalization(
					getDataSetDisplayName(), "DataSetDisplayName", languageId));
		}
	}

	@Override
	public void setDataSetDisplayNameCurrentLanguageId(String languageId) {
		_dataSetDisplayNameCurrentLanguageId = languageId;
	}

	@Override
	public void setDataSetDisplayNameMap(
		Map<Locale, String> dataSetDisplayNameMap) {

		setDataSetDisplayNameMap(
			dataSetDisplayNameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDataSetDisplayNameMap(
		Map<Locale, String> dataSetDisplayNameMap, Locale defaultLocale) {

		if (dataSetDisplayNameMap == null) {
			return;
		}

		setDataSetDisplayName(
			LocalizationUtil.updateLocalization(
				dataSetDisplayNameMap, getDataSetDisplayName(),
				"DataSetDisplayName", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getDataTypeDisplayName() {
		if (_dataTypeDisplayName == null) {
			return "";
		}
		else {
			return _dataTypeDisplayName;
		}
	}

	@Override
	public String getDataTypeDisplayName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDataTypeDisplayName(languageId);
	}

	@Override
	public String getDataTypeDisplayName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDataTypeDisplayName(languageId, useDefault);
	}

	@Override
	public String getDataTypeDisplayName(String languageId) {
		return LocalizationUtil.getLocalization(
			getDataTypeDisplayName(), languageId);
	}

	@Override
	public String getDataTypeDisplayName(
		String languageId, boolean useDefault) {

		return LocalizationUtil.getLocalization(
			getDataTypeDisplayName(), languageId, useDefault);
	}

	@Override
	public String getDataTypeDisplayNameCurrentLanguageId() {
		return _dataTypeDisplayNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDataTypeDisplayNameCurrentValue() {
		Locale locale = getLocale(_dataTypeDisplayNameCurrentLanguageId);

		return getDataTypeDisplayName(locale);
	}

	@Override
	public Map<Locale, String> getDataTypeDisplayNameMap() {
		return LocalizationUtil.getLocalizationMap(getDataTypeDisplayName());
	}

	@Override
	public void setDataTypeDisplayName(String dataTypeDisplayName) {
		_dataTypeDisplayName = dataTypeDisplayName;
	}

	@Override
	public void setDataTypeDisplayName(
		String dataTypeDisplayName, Locale locale) {

		setDataTypeDisplayName(
			dataTypeDisplayName, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDataTypeDisplayName(
		String dataTypeDisplayName, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(dataTypeDisplayName)) {
			setDataTypeDisplayName(
				LocalizationUtil.updateLocalization(
					getDataTypeDisplayName(), "DataTypeDisplayName",
					dataTypeDisplayName, languageId, defaultLanguageId));
		}
		else {
			setDataTypeDisplayName(
				LocalizationUtil.removeLocalization(
					getDataTypeDisplayName(), "DataTypeDisplayName",
					languageId));
		}
	}

	@Override
	public void setDataTypeDisplayNameCurrentLanguageId(String languageId) {
		_dataTypeDisplayNameCurrentLanguageId = languageId;
	}

	@Override
	public void setDataTypeDisplayNameMap(
		Map<Locale, String> dataTypeDisplayNameMap) {

		setDataTypeDisplayNameMap(
			dataTypeDisplayNameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDataTypeDisplayNameMap(
		Map<Locale, String> dataTypeDisplayNameMap, Locale defaultLocale) {

		if (dataTypeDisplayNameMap == null) {
			return;
		}

		setDataTypeDisplayName(
			LocalizationUtil.updateLocalization(
				dataTypeDisplayNameMap, getDataTypeDisplayName(),
				"DataTypeDisplayName", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getFolderName() {
		if (_folderName == null) {
			return "";
		}
		else {
			return _folderName;
		}
	}

	@Override
	public String getFolderName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getFolderName(languageId);
	}

	@Override
	public String getFolderName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getFolderName(languageId, useDefault);
	}

	@Override
	public String getFolderName(String languageId) {
		return LocalizationUtil.getLocalization(getFolderName(), languageId);
	}

	@Override
	public String getFolderName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getFolderName(), languageId, useDefault);
	}

	@Override
	public String getFolderNameCurrentLanguageId() {
		return _folderNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getFolderNameCurrentValue() {
		Locale locale = getLocale(_folderNameCurrentLanguageId);

		return getFolderName(locale);
	}

	@Override
	public Map<Locale, String> getFolderNameMap() {
		return LocalizationUtil.getLocalizationMap(getFolderName());
	}

	@Override
	public void setFolderName(String folderName) {
		_folderName = folderName;
	}

	@Override
	public void setFolderName(String folderName, Locale locale) {
		setFolderName(folderName, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setFolderName(
		String folderName, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(folderName)) {
			setFolderName(
				LocalizationUtil.updateLocalization(
					getFolderName(), "FolderName", folderName, languageId,
					defaultLanguageId));
		}
		else {
			setFolderName(
				LocalizationUtil.removeLocalization(
					getFolderName(), "FolderName", languageId));
		}
	}

	@Override
	public void setFolderNameCurrentLanguageId(String languageId) {
		_folderNameCurrentLanguageId = languageId;
	}

	@Override
	public void setFolderNameMap(Map<Locale, String> folderNameMap) {
		setFolderNameMap(folderNameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setFolderNameMap(
		Map<Locale, String> folderNameMap, Locale defaultLocale) {

		if (folderNameMap == null) {
			return;
		}

		setFolderName(
			LocalizationUtil.updateLocalization(
				folderNameMap, getFolderName(), "FolderName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getStructuredData() {
		if (_structuredData == null) {
			return "";
		}
		else {
			return _structuredData;
		}
	}

	@Override
	public void setStructuredData(String structuredData) {
		_structuredData = structuredData;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), DisverifiedData.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> dataSetDisplayNameMap = getDataSetDisplayNameMap();

		for (Map.Entry<Locale, String> entry :
				dataSetDisplayNameMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> dataTypeDisplayNameMap =
			getDataTypeDisplayNameMap();

		for (Map.Entry<Locale, String> entry :
				dataTypeDisplayNameMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> folderNameMap = getFolderNameMap();

		for (Map.Entry<Locale, String> entry : folderNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getDataSetDisplayName();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			DisverifiedData.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String dataSetDisplayName = getDataSetDisplayName(defaultLocale);

		if (Validator.isNull(dataSetDisplayName)) {
			setDataSetDisplayName(
				getDataSetDisplayName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDataSetDisplayName(
				getDataSetDisplayName(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String dataTypeDisplayName = getDataTypeDisplayName(defaultLocale);

		if (Validator.isNull(dataTypeDisplayName)) {
			setDataTypeDisplayName(
				getDataTypeDisplayName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDataTypeDisplayName(
				getDataTypeDisplayName(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String folderName = getFolderName(defaultLocale);

		if (Validator.isNull(folderName)) {
			setFolderName(getFolderName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setFolderName(
				getFolderName(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public DisverifiedData toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DisverifiedData>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DisverifiedDataImpl disverifiedDataImpl = new DisverifiedDataImpl();

		disverifiedDataImpl.setDisverifiedDataId(getDisverifiedDataId());
		disverifiedDataImpl.setGroupId(getGroupId());
		disverifiedDataImpl.setCompanyId(getCompanyId());
		disverifiedDataImpl.setUserId(getUserId());
		disverifiedDataImpl.setUserName(getUserName());
		disverifiedDataImpl.setCreateDate(getCreateDate());
		disverifiedDataImpl.setModifiedDate(getModifiedDate());
		disverifiedDataImpl.setStatus(getStatus());
		disverifiedDataImpl.setDataSetId(getDataSetId());
		disverifiedDataImpl.setDataTypeId(getDataTypeId());
		disverifiedDataImpl.setFolderId(getFolderId());
		disverifiedDataImpl.setTempDataTitle(getTempDataTitle());
		disverifiedDataImpl.setDataSetDisplayName(getDataSetDisplayName());
		disverifiedDataImpl.setDataTypeDisplayName(getDataTypeDisplayName());
		disverifiedDataImpl.setFolderName(getFolderName());
		disverifiedDataImpl.setStructuredData(getStructuredData());

		disverifiedDataImpl.resetOriginalValues();

		return disverifiedDataImpl;
	}

	@Override
	public int compareTo(DisverifiedData disverifiedData) {
		long primaryKey = disverifiedData.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DisverifiedData)) {
			return false;
		}

		DisverifiedData disverifiedData = (DisverifiedData)object;

		long primaryKey = disverifiedData.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalGroupId = _groupId;

		_setOriginalGroupId = false;

		_originalUserId = _userId;

		_setOriginalUserId = false;

		_setModifiedDate = false;
		_originalStatus = _status;

		_setOriginalStatus = false;

		_originalDataSetId = _dataSetId;

		_setOriginalDataSetId = false;

		_originalDataTypeId = _dataTypeId;

		_setOriginalDataTypeId = false;

		_originalFolderId = _folderId;

		_setOriginalFolderId = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DisverifiedData> toCacheModel() {
		DisverifiedDataCacheModel disverifiedDataCacheModel =
			new DisverifiedDataCacheModel();

		disverifiedDataCacheModel.disverifiedDataId = getDisverifiedDataId();

		disverifiedDataCacheModel.groupId = getGroupId();

		disverifiedDataCacheModel.companyId = getCompanyId();

		disverifiedDataCacheModel.userId = getUserId();

		disverifiedDataCacheModel.userName = getUserName();

		String userName = disverifiedDataCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			disverifiedDataCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			disverifiedDataCacheModel.createDate = createDate.getTime();
		}
		else {
			disverifiedDataCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			disverifiedDataCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			disverifiedDataCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		disverifiedDataCacheModel.status = getStatus();

		disverifiedDataCacheModel.dataSetId = getDataSetId();

		disverifiedDataCacheModel.dataTypeId = getDataTypeId();

		disverifiedDataCacheModel.folderId = getFolderId();

		disverifiedDataCacheModel.tempDataTitle = getTempDataTitle();

		String tempDataTitle = disverifiedDataCacheModel.tempDataTitle;

		if ((tempDataTitle != null) && (tempDataTitle.length() == 0)) {
			disverifiedDataCacheModel.tempDataTitle = null;
		}

		disverifiedDataCacheModel.dataSetDisplayName = getDataSetDisplayName();

		String dataSetDisplayName =
			disverifiedDataCacheModel.dataSetDisplayName;

		if ((dataSetDisplayName != null) &&
			(dataSetDisplayName.length() == 0)) {

			disverifiedDataCacheModel.dataSetDisplayName = null;
		}

		disverifiedDataCacheModel.dataTypeDisplayName =
			getDataTypeDisplayName();

		String dataTypeDisplayName =
			disverifiedDataCacheModel.dataTypeDisplayName;

		if ((dataTypeDisplayName != null) &&
			(dataTypeDisplayName.length() == 0)) {

			disverifiedDataCacheModel.dataTypeDisplayName = null;
		}

		disverifiedDataCacheModel.folderName = getFolderName();

		String folderName = disverifiedDataCacheModel.folderName;

		if ((folderName != null) && (folderName.length() == 0)) {
			disverifiedDataCacheModel.folderName = null;
		}

		disverifiedDataCacheModel.structuredData = getStructuredData();

		String structuredData = disverifiedDataCacheModel.structuredData;

		if ((structuredData != null) && (structuredData.length() == 0)) {
			disverifiedDataCacheModel.structuredData = null;
		}

		return disverifiedDataCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DisverifiedData, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DisverifiedData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DisverifiedData, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((DisverifiedData)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DisverifiedData, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DisverifiedData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DisverifiedData, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DisverifiedData)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DisverifiedData>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _disverifiedDataId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _dataSetId;
	private long _originalDataSetId;
	private boolean _setOriginalDataSetId;
	private long _dataTypeId;
	private long _originalDataTypeId;
	private boolean _setOriginalDataTypeId;
	private long _folderId;
	private long _originalFolderId;
	private boolean _setOriginalFolderId;
	private String _tempDataTitle;
	private String _dataSetDisplayName;
	private String _dataSetDisplayNameCurrentLanguageId;
	private String _dataTypeDisplayName;
	private String _dataTypeDisplayNameCurrentLanguageId;
	private String _folderName;
	private String _folderNameCurrentLanguageId;
	private String _structuredData;
	private long _columnBitmask;
	private DisverifiedData _escapedModel;

}