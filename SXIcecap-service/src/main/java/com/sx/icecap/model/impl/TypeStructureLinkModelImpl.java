/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sx.icecap.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.sx.icecap.model.TypeStructureLink;
import com.sx.icecap.model.TypeStructureLinkModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TypeStructureLink service. Represents a row in the &quot;SX_ICECAP_TypeStructureLink&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TypeStructureLinkModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TypeStructureLinkImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TypeStructureLinkImpl
 * @generated
 */
public class TypeStructureLinkModelImpl
	extends BaseModelImpl<TypeStructureLink> implements TypeStructureLinkModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a type structure link model instance should use the <code>TypeStructureLink</code> interface instead.
	 */
	public static final String TABLE_NAME = "SX_ICECAP_TypeStructureLink";

	public static final Object[][] TABLE_COLUMNS = {
		{"dataTypeId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"dataStructureId", Types.BIGINT},
		{"commentable", Types.BOOLEAN}, {"verifiable", Types.BOOLEAN},
		{"freezable", Types.BOOLEAN}, {"freezed", Types.BOOLEAN},
		{"freezedUserId", Types.BIGINT}, {"freezedUserName", Types.VARCHAR},
		{"freezedDate", Types.TIMESTAMP}, {"verified", Types.BOOLEAN},
		{"verifiedUserId", Types.BIGINT}, {"verifiedUserName", Types.VARCHAR},
		{"verifiedDate", Types.TIMESTAMP}, {"inputStatus", Types.BOOLEAN},
		{"jumpTo", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("dataTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataStructureId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("commentable", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("verifiable", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("freezable", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("freezed", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("freezedUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("freezedUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("freezedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("verified", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("verifiedUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("verifiedUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("verifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("inputStatus", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("jumpTo", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SX_ICECAP_TypeStructureLink (dataTypeId LONG not null primary key,userId LONG,groupId LONG,dataStructureId LONG,commentable BOOLEAN,verifiable BOOLEAN,freezable BOOLEAN,freezed BOOLEAN,freezedUserId LONG,freezedUserName VARCHAR(75) null,freezedDate DATE null,verified BOOLEAN,verifiedUserId LONG,verifiedUserName VARCHAR(75) null,verifiedDate DATE null,inputStatus BOOLEAN,jumpTo BOOLEAN)";

	public static final String TABLE_SQL_DROP =
		"drop table SX_ICECAP_TypeStructureLink";

	public static final String ORDER_BY_JPQL =
		" ORDER BY typeStructureLink.dataTypeId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SX_ICECAP_TypeStructureLink.dataTypeId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long DATASTRUCTUREID_COLUMN_BITMASK = 1L;

	public static final long FREEZED_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long USERID_COLUMN_BITMASK = 8L;

	public static final long VERIFIED_COLUMN_BITMASK = 16L;

	public static final long DATATYPEID_COLUMN_BITMASK = 32L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public TypeStructureLinkModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dataTypeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDataTypeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dataTypeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TypeStructureLink.class;
	}

	@Override
	public String getModelClassName() {
		return TypeStructureLink.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TypeStructureLink, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TypeStructureLink, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TypeStructureLink, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((TypeStructureLink)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TypeStructureLink, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TypeStructureLink, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TypeStructureLink)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TypeStructureLink, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TypeStructureLink, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<TypeStructureLink, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<TypeStructureLink, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<TypeStructureLink, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<TypeStructureLink, Object>>();
		Map<String, BiConsumer<TypeStructureLink, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<TypeStructureLink, ?>>();

		attributeGetterFunctions.put(
			"dataTypeId", TypeStructureLink::getDataTypeId);
		attributeSetterBiConsumers.put(
			"dataTypeId",
			(BiConsumer<TypeStructureLink, Long>)
				TypeStructureLink::setDataTypeId);
		attributeGetterFunctions.put("userId", TypeStructureLink::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<TypeStructureLink, Long>)TypeStructureLink::setUserId);
		attributeGetterFunctions.put("groupId", TypeStructureLink::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<TypeStructureLink, Long>)TypeStructureLink::setGroupId);
		attributeGetterFunctions.put(
			"dataStructureId", TypeStructureLink::getDataStructureId);
		attributeSetterBiConsumers.put(
			"dataStructureId",
			(BiConsumer<TypeStructureLink, Long>)
				TypeStructureLink::setDataStructureId);
		attributeGetterFunctions.put(
			"commentable", TypeStructureLink::getCommentable);
		attributeSetterBiConsumers.put(
			"commentable",
			(BiConsumer<TypeStructureLink, Boolean>)
				TypeStructureLink::setCommentable);
		attributeGetterFunctions.put(
			"verifiable", TypeStructureLink::getVerifiable);
		attributeSetterBiConsumers.put(
			"verifiable",
			(BiConsumer<TypeStructureLink, Boolean>)
				TypeStructureLink::setVerifiable);
		attributeGetterFunctions.put(
			"freezable", TypeStructureLink::getFreezable);
		attributeSetterBiConsumers.put(
			"freezable",
			(BiConsumer<TypeStructureLink, Boolean>)
				TypeStructureLink::setFreezable);
		attributeGetterFunctions.put("freezed", TypeStructureLink::getFreezed);
		attributeSetterBiConsumers.put(
			"freezed",
			(BiConsumer<TypeStructureLink, Boolean>)
				TypeStructureLink::setFreezed);
		attributeGetterFunctions.put(
			"freezedUserId", TypeStructureLink::getFreezedUserId);
		attributeSetterBiConsumers.put(
			"freezedUserId",
			(BiConsumer<TypeStructureLink, Long>)
				TypeStructureLink::setFreezedUserId);
		attributeGetterFunctions.put(
			"freezedUserName", TypeStructureLink::getFreezedUserName);
		attributeSetterBiConsumers.put(
			"freezedUserName",
			(BiConsumer<TypeStructureLink, String>)
				TypeStructureLink::setFreezedUserName);
		attributeGetterFunctions.put(
			"freezedDate", TypeStructureLink::getFreezedDate);
		attributeSetterBiConsumers.put(
			"freezedDate",
			(BiConsumer<TypeStructureLink, Date>)
				TypeStructureLink::setFreezedDate);
		attributeGetterFunctions.put(
			"verified", TypeStructureLink::getVerified);
		attributeSetterBiConsumers.put(
			"verified",
			(BiConsumer<TypeStructureLink, Boolean>)
				TypeStructureLink::setVerified);
		attributeGetterFunctions.put(
			"verifiedUserId", TypeStructureLink::getVerifiedUserId);
		attributeSetterBiConsumers.put(
			"verifiedUserId",
			(BiConsumer<TypeStructureLink, Long>)
				TypeStructureLink::setVerifiedUserId);
		attributeGetterFunctions.put(
			"verifiedUserName", TypeStructureLink::getVerifiedUserName);
		attributeSetterBiConsumers.put(
			"verifiedUserName",
			(BiConsumer<TypeStructureLink, String>)
				TypeStructureLink::setVerifiedUserName);
		attributeGetterFunctions.put(
			"verifiedDate", TypeStructureLink::getVerifiedDate);
		attributeSetterBiConsumers.put(
			"verifiedDate",
			(BiConsumer<TypeStructureLink, Date>)
				TypeStructureLink::setVerifiedDate);
		attributeGetterFunctions.put(
			"inputStatus", TypeStructureLink::getInputStatus);
		attributeSetterBiConsumers.put(
			"inputStatus",
			(BiConsumer<TypeStructureLink, Boolean>)
				TypeStructureLink::setInputStatus);
		attributeGetterFunctions.put("jumpTo", TypeStructureLink::getJumpTo);
		attributeSetterBiConsumers.put(
			"jumpTo",
			(BiConsumer<TypeStructureLink, Boolean>)
				TypeStructureLink::setJumpTo);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getDataTypeId() {
		return _dataTypeId;
	}

	@Override
	public void setDataTypeId(long dataTypeId) {
		_dataTypeId = dataTypeId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getDataStructureId() {
		return _dataStructureId;
	}

	@Override
	public void setDataStructureId(long dataStructureId) {
		_columnBitmask |= DATASTRUCTUREID_COLUMN_BITMASK;

		if (!_setOriginalDataStructureId) {
			_setOriginalDataStructureId = true;

			_originalDataStructureId = _dataStructureId;
		}

		_dataStructureId = dataStructureId;
	}

	public long getOriginalDataStructureId() {
		return _originalDataStructureId;
	}

	@Override
	public boolean getCommentable() {
		return _commentable;
	}

	@Override
	public boolean isCommentable() {
		return _commentable;
	}

	@Override
	public void setCommentable(boolean commentable) {
		_commentable = commentable;
	}

	@Override
	public boolean getVerifiable() {
		return _verifiable;
	}

	@Override
	public boolean isVerifiable() {
		return _verifiable;
	}

	@Override
	public void setVerifiable(boolean verifiable) {
		_verifiable = verifiable;
	}

	@Override
	public boolean getFreezable() {
		return _freezable;
	}

	@Override
	public boolean isFreezable() {
		return _freezable;
	}

	@Override
	public void setFreezable(boolean freezable) {
		_freezable = freezable;
	}

	@Override
	public boolean getFreezed() {
		return _freezed;
	}

	@Override
	public boolean isFreezed() {
		return _freezed;
	}

	@Override
	public void setFreezed(boolean freezed) {
		_columnBitmask |= FREEZED_COLUMN_BITMASK;

		if (!_setOriginalFreezed) {
			_setOriginalFreezed = true;

			_originalFreezed = _freezed;
		}

		_freezed = freezed;
	}

	public boolean getOriginalFreezed() {
		return _originalFreezed;
	}

	@Override
	public long getFreezedUserId() {
		return _freezedUserId;
	}

	@Override
	public void setFreezedUserId(long freezedUserId) {
		_freezedUserId = freezedUserId;
	}

	@Override
	public String getFreezedUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getFreezedUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setFreezedUserUuid(String freezedUserUuid) {
	}

	@Override
	public String getFreezedUserName() {
		if (_freezedUserName == null) {
			return "";
		}
		else {
			return _freezedUserName;
		}
	}

	@Override
	public void setFreezedUserName(String freezedUserName) {
		_freezedUserName = freezedUserName;
	}

	@Override
	public Date getFreezedDate() {
		return _freezedDate;
	}

	@Override
	public void setFreezedDate(Date freezedDate) {
		_freezedDate = freezedDate;
	}

	@Override
	public boolean getVerified() {
		return _verified;
	}

	@Override
	public boolean isVerified() {
		return _verified;
	}

	@Override
	public void setVerified(boolean verified) {
		_columnBitmask |= VERIFIED_COLUMN_BITMASK;

		if (!_setOriginalVerified) {
			_setOriginalVerified = true;

			_originalVerified = _verified;
		}

		_verified = verified;
	}

	public boolean getOriginalVerified() {
		return _originalVerified;
	}

	@Override
	public long getVerifiedUserId() {
		return _verifiedUserId;
	}

	@Override
	public void setVerifiedUserId(long verifiedUserId) {
		_verifiedUserId = verifiedUserId;
	}

	@Override
	public String getVerifiedUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getVerifiedUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setVerifiedUserUuid(String verifiedUserUuid) {
	}

	@Override
	public String getVerifiedUserName() {
		if (_verifiedUserName == null) {
			return "";
		}
		else {
			return _verifiedUserName;
		}
	}

	@Override
	public void setVerifiedUserName(String verifiedUserName) {
		_verifiedUserName = verifiedUserName;
	}

	@Override
	public Date getVerifiedDate() {
		return _verifiedDate;
	}

	@Override
	public void setVerifiedDate(Date verifiedDate) {
		_verifiedDate = verifiedDate;
	}

	@Override
	public boolean getInputStatus() {
		return _inputStatus;
	}

	@Override
	public boolean isInputStatus() {
		return _inputStatus;
	}

	@Override
	public void setInputStatus(boolean inputStatus) {
		_inputStatus = inputStatus;
	}

	@Override
	public boolean getJumpTo() {
		return _jumpTo;
	}

	@Override
	public boolean isJumpTo() {
		return _jumpTo;
	}

	@Override
	public void setJumpTo(boolean jumpTo) {
		_jumpTo = jumpTo;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, TypeStructureLink.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TypeStructureLink toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TypeStructureLink>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TypeStructureLinkImpl typeStructureLinkImpl =
			new TypeStructureLinkImpl();

		typeStructureLinkImpl.setDataTypeId(getDataTypeId());
		typeStructureLinkImpl.setUserId(getUserId());
		typeStructureLinkImpl.setGroupId(getGroupId());
		typeStructureLinkImpl.setDataStructureId(getDataStructureId());
		typeStructureLinkImpl.setCommentable(isCommentable());
		typeStructureLinkImpl.setVerifiable(isVerifiable());
		typeStructureLinkImpl.setFreezable(isFreezable());
		typeStructureLinkImpl.setFreezed(isFreezed());
		typeStructureLinkImpl.setFreezedUserId(getFreezedUserId());
		typeStructureLinkImpl.setFreezedUserName(getFreezedUserName());
		typeStructureLinkImpl.setFreezedDate(getFreezedDate());
		typeStructureLinkImpl.setVerified(isVerified());
		typeStructureLinkImpl.setVerifiedUserId(getVerifiedUserId());
		typeStructureLinkImpl.setVerifiedUserName(getVerifiedUserName());
		typeStructureLinkImpl.setVerifiedDate(getVerifiedDate());
		typeStructureLinkImpl.setInputStatus(isInputStatus());
		typeStructureLinkImpl.setJumpTo(isJumpTo());

		typeStructureLinkImpl.resetOriginalValues();

		return typeStructureLinkImpl;
	}

	@Override
	public int compareTo(TypeStructureLink typeStructureLink) {
		long primaryKey = typeStructureLink.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TypeStructureLink)) {
			return false;
		}

		TypeStructureLink typeStructureLink = (TypeStructureLink)object;

		long primaryKey = typeStructureLink.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalUserId = _userId;

		_setOriginalUserId = false;

		_originalGroupId = _groupId;

		_setOriginalGroupId = false;

		_originalDataStructureId = _dataStructureId;

		_setOriginalDataStructureId = false;

		_originalFreezed = _freezed;

		_setOriginalFreezed = false;

		_originalVerified = _verified;

		_setOriginalVerified = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<TypeStructureLink> toCacheModel() {
		TypeStructureLinkCacheModel typeStructureLinkCacheModel =
			new TypeStructureLinkCacheModel();

		typeStructureLinkCacheModel.dataTypeId = getDataTypeId();

		typeStructureLinkCacheModel.userId = getUserId();

		typeStructureLinkCacheModel.groupId = getGroupId();

		typeStructureLinkCacheModel.dataStructureId = getDataStructureId();

		typeStructureLinkCacheModel.commentable = isCommentable();

		typeStructureLinkCacheModel.verifiable = isVerifiable();

		typeStructureLinkCacheModel.freezable = isFreezable();

		typeStructureLinkCacheModel.freezed = isFreezed();

		typeStructureLinkCacheModel.freezedUserId = getFreezedUserId();

		typeStructureLinkCacheModel.freezedUserName = getFreezedUserName();

		String freezedUserName = typeStructureLinkCacheModel.freezedUserName;

		if ((freezedUserName != null) && (freezedUserName.length() == 0)) {
			typeStructureLinkCacheModel.freezedUserName = null;
		}

		Date freezedDate = getFreezedDate();

		if (freezedDate != null) {
			typeStructureLinkCacheModel.freezedDate = freezedDate.getTime();
		}
		else {
			typeStructureLinkCacheModel.freezedDate = Long.MIN_VALUE;
		}

		typeStructureLinkCacheModel.verified = isVerified();

		typeStructureLinkCacheModel.verifiedUserId = getVerifiedUserId();

		typeStructureLinkCacheModel.verifiedUserName = getVerifiedUserName();

		String verifiedUserName = typeStructureLinkCacheModel.verifiedUserName;

		if ((verifiedUserName != null) && (verifiedUserName.length() == 0)) {
			typeStructureLinkCacheModel.verifiedUserName = null;
		}

		Date verifiedDate = getVerifiedDate();

		if (verifiedDate != null) {
			typeStructureLinkCacheModel.verifiedDate = verifiedDate.getTime();
		}
		else {
			typeStructureLinkCacheModel.verifiedDate = Long.MIN_VALUE;
		}

		typeStructureLinkCacheModel.inputStatus = isInputStatus();

		typeStructureLinkCacheModel.jumpTo = isJumpTo();

		return typeStructureLinkCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TypeStructureLink, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TypeStructureLink, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TypeStructureLink, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(TypeStructureLink)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<TypeStructureLink, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<TypeStructureLink, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TypeStructureLink, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((TypeStructureLink)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, TypeStructureLink>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					TypeStructureLink.class, ModelWrapper.class);

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _dataTypeId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _dataStructureId;
	private long _originalDataStructureId;
	private boolean _setOriginalDataStructureId;
	private boolean _commentable;
	private boolean _verifiable;
	private boolean _freezable;
	private boolean _freezed;
	private boolean _originalFreezed;
	private boolean _setOriginalFreezed;
	private long _freezedUserId;
	private String _freezedUserName;
	private Date _freezedDate;
	private boolean _verified;
	private boolean _originalVerified;
	private boolean _setOriginalVerified;
	private long _verifiedUserId;
	private String _verifiedUserName;
	private Date _verifiedDate;
	private boolean _inputStatus;
	private boolean _jumpTo;
	private long _columnBitmask;
	private TypeStructureLink _escapedModel;

}