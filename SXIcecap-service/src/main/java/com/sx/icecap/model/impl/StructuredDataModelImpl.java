/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sx.icecap.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.NoSuchModelException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ContainerModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.TrashedModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import com.sx.icecap.model.StructuredData;
import com.sx.icecap.model.StructuredDataModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the StructuredData service. Represents a row in the &quot;SX_ICECAP_StructuredData&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StructuredDataModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StructuredDataImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StructuredDataImpl
 * @generated
 */
public class StructuredDataModelImpl
	extends BaseModelImpl<StructuredData> implements StructuredDataModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a structured data model instance should use the <code>StructuredData</code> interface instead.
	 */
	public static final String TABLE_NAME = "SX_ICECAP_StructuredData";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"structuredDataId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP},
		{"dataCollectionId", Types.BIGINT}, {"dataSetId", Types.BIGINT},
		{"dataTypeId", Types.BIGINT}, {"multiple", Types.BOOLEAN},
		{"startIndex", Types.BIGINT}, {"count", Types.INTEGER},
		{"freezed", Types.BOOLEAN}, {"verified", Types.BOOLEAN},
		{"comments", Types.BOOLEAN}, {"history", Types.BOOLEAN},
		{"data_", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("structuredDataId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dataCollectionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataSetId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("multiple", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("startIndex", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("count", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("freezed", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("verified", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("comments", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("history", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("data_", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SX_ICECAP_StructuredData (uuid_ VARCHAR(75) null,structuredDataId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,dataCollectionId LONG,dataSetId LONG,dataTypeId LONG,multiple BOOLEAN,startIndex LONG,count INTEGER,freezed BOOLEAN,verified BOOLEAN,comments BOOLEAN,history BOOLEAN,data_ VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table SX_ICECAP_StructuredData";

	public static final String ORDER_BY_JPQL =
		" ORDER BY structuredData.structuredDataId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SX_ICECAP_StructuredData.structuredDataId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long DATACOLLECTIONID_COLUMN_BITMASK = 2L;

	public static final long DATASETID_COLUMN_BITMASK = 4L;

	public static final long DATATYPEID_COLUMN_BITMASK = 8L;

	public static final long GROUPID_COLUMN_BITMASK = 16L;

	public static final long STATUS_COLUMN_BITMASK = 32L;

	public static final long USERID_COLUMN_BITMASK = 64L;

	public static final long UUID_COLUMN_BITMASK = 128L;

	public static final long STRUCTUREDDATAID_COLUMN_BITMASK = 256L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public StructuredDataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _structuredDataId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStructuredDataId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _structuredDataId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StructuredData.class;
	}

	@Override
	public String getModelClassName() {
		return StructuredData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<StructuredData, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<StructuredData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StructuredData, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((StructuredData)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<StructuredData, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<StructuredData, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(StructuredData)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<StructuredData, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<StructuredData, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<StructuredData, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<StructuredData, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<StructuredData, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<StructuredData, Object>>();
		Map<String, BiConsumer<StructuredData, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<StructuredData, ?>>();

		attributeGetterFunctions.put("uuid", StructuredData::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<StructuredData, String>)StructuredData::setUuid);
		attributeGetterFunctions.put(
			"structuredDataId", StructuredData::getStructuredDataId);
		attributeSetterBiConsumers.put(
			"structuredDataId",
			(BiConsumer<StructuredData, Long>)
				StructuredData::setStructuredDataId);
		attributeGetterFunctions.put("groupId", StructuredData::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<StructuredData, Long>)StructuredData::setGroupId);
		attributeGetterFunctions.put("companyId", StructuredData::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<StructuredData, Long>)StructuredData::setCompanyId);
		attributeGetterFunctions.put("userId", StructuredData::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<StructuredData, Long>)StructuredData::setUserId);
		attributeGetterFunctions.put("userName", StructuredData::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<StructuredData, String>)StructuredData::setUserName);
		attributeGetterFunctions.put(
			"createDate", StructuredData::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<StructuredData, Date>)StructuredData::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", StructuredData::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<StructuredData, Date>)StructuredData::setModifiedDate);
		attributeGetterFunctions.put("status", StructuredData::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<StructuredData, Integer>)StructuredData::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", StructuredData::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<StructuredData, Long>)
				StructuredData::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", StructuredData::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<StructuredData, String>)
				StructuredData::setStatusByUserName);
		attributeGetterFunctions.put(
			"statusDate", StructuredData::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<StructuredData, Date>)StructuredData::setStatusDate);
		attributeGetterFunctions.put(
			"dataCollectionId", StructuredData::getDataCollectionId);
		attributeSetterBiConsumers.put(
			"dataCollectionId",
			(BiConsumer<StructuredData, Long>)
				StructuredData::setDataCollectionId);
		attributeGetterFunctions.put("dataSetId", StructuredData::getDataSetId);
		attributeSetterBiConsumers.put(
			"dataSetId",
			(BiConsumer<StructuredData, Long>)StructuredData::setDataSetId);
		attributeGetterFunctions.put(
			"dataTypeId", StructuredData::getDataTypeId);
		attributeSetterBiConsumers.put(
			"dataTypeId",
			(BiConsumer<StructuredData, Long>)StructuredData::setDataTypeId);
		attributeGetterFunctions.put("multiple", StructuredData::getMultiple);
		attributeSetterBiConsumers.put(
			"multiple",
			(BiConsumer<StructuredData, Boolean>)StructuredData::setMultiple);
		attributeGetterFunctions.put(
			"startIndex", StructuredData::getStartIndex);
		attributeSetterBiConsumers.put(
			"startIndex",
			(BiConsumer<StructuredData, Long>)StructuredData::setStartIndex);
		attributeGetterFunctions.put("count", StructuredData::getCount);
		attributeSetterBiConsumers.put(
			"count",
			(BiConsumer<StructuredData, Integer>)StructuredData::setCount);
		attributeGetterFunctions.put("freezed", StructuredData::getFreezed);
		attributeSetterBiConsumers.put(
			"freezed",
			(BiConsumer<StructuredData, Boolean>)StructuredData::setFreezed);
		attributeGetterFunctions.put("verified", StructuredData::getVerified);
		attributeSetterBiConsumers.put(
			"verified",
			(BiConsumer<StructuredData, Boolean>)StructuredData::setVerified);
		attributeGetterFunctions.put("comments", StructuredData::getComments);
		attributeSetterBiConsumers.put(
			"comments",
			(BiConsumer<StructuredData, Boolean>)StructuredData::setComments);
		attributeGetterFunctions.put("history", StructuredData::getHistory);
		attributeSetterBiConsumers.put(
			"history",
			(BiConsumer<StructuredData, Boolean>)StructuredData::setHistory);
		attributeGetterFunctions.put("data", StructuredData::getData);
		attributeSetterBiConsumers.put(
			"data",
			(BiConsumer<StructuredData, String>)StructuredData::setData);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getStructuredDataId() {
		return _structuredDataId;
	}

	@Override
	public void setStructuredDataId(long structuredDataId) {
		_structuredDataId = structuredDataId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public long getDataCollectionId() {
		return _dataCollectionId;
	}

	@Override
	public void setDataCollectionId(long dataCollectionId) {
		_columnBitmask |= DATACOLLECTIONID_COLUMN_BITMASK;

		if (!_setOriginalDataCollectionId) {
			_setOriginalDataCollectionId = true;

			_originalDataCollectionId = _dataCollectionId;
		}

		_dataCollectionId = dataCollectionId;
	}

	public long getOriginalDataCollectionId() {
		return _originalDataCollectionId;
	}

	@Override
	public long getDataSetId() {
		return _dataSetId;
	}

	@Override
	public void setDataSetId(long dataSetId) {
		_columnBitmask |= DATASETID_COLUMN_BITMASK;

		if (!_setOriginalDataSetId) {
			_setOriginalDataSetId = true;

			_originalDataSetId = _dataSetId;
		}

		_dataSetId = dataSetId;
	}

	public long getOriginalDataSetId() {
		return _originalDataSetId;
	}

	@Override
	public long getDataTypeId() {
		return _dataTypeId;
	}

	@Override
	public void setDataTypeId(long dataTypeId) {
		_columnBitmask |= DATATYPEID_COLUMN_BITMASK;

		if (!_setOriginalDataTypeId) {
			_setOriginalDataTypeId = true;

			_originalDataTypeId = _dataTypeId;
		}

		_dataTypeId = dataTypeId;
	}

	public long getOriginalDataTypeId() {
		return _originalDataTypeId;
	}

	@Override
	public boolean getMultiple() {
		return _multiple;
	}

	@Override
	public boolean isMultiple() {
		return _multiple;
	}

	@Override
	public void setMultiple(boolean multiple) {
		_multiple = multiple;
	}

	@Override
	public long getStartIndex() {
		return _startIndex;
	}

	@Override
	public void setStartIndex(long startIndex) {
		_startIndex = startIndex;
	}

	@Override
	public int getCount() {
		return _count;
	}

	@Override
	public void setCount(int count) {
		_count = count;
	}

	@Override
	public boolean getFreezed() {
		return _freezed;
	}

	@Override
	public boolean isFreezed() {
		return _freezed;
	}

	@Override
	public void setFreezed(boolean freezed) {
		_freezed = freezed;
	}

	@Override
	public boolean getVerified() {
		return _verified;
	}

	@Override
	public boolean isVerified() {
		return _verified;
	}

	@Override
	public void setVerified(boolean verified) {
		_verified = verified;
	}

	@Override
	public boolean getComments() {
		return _comments;
	}

	@Override
	public boolean isComments() {
		return _comments;
	}

	@Override
	public void setComments(boolean comments) {
		_comments = comments;
	}

	@Override
	public boolean getHistory() {
		return _history;
	}

	@Override
	public boolean isHistory() {
		return _history;
	}

	@Override
	public void setHistory(boolean history) {
		_history = history;
	}

	@Override
	public String getData() {
		if (_data == null) {
			return "";
		}
		else {
			return _data;
		}
	}

	@Override
	public void setData(String data) {
		_data = data;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(StructuredData.class.getName()));
	}

	@Override
	public com.liferay.trash.kernel.model.TrashEntry getTrashEntry()
		throws PortalException {

		if (!isInTrash()) {
			return null;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry =
			com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.
				fetchEntry(getModelClassName(), getTrashEntryClassPK());

		if (trashEntry != null) {
			return trashEntry;
		}

		com.liferay.portal.kernel.trash.TrashHandler trashHandler =
			getTrashHandler();

		if (Validator.isNotNull(
				trashHandler.getContainerModelClassName(getPrimaryKey()))) {

			ContainerModel containerModel = null;

			try {
				containerModel = trashHandler.getParentContainerModel(this);
			}
			catch (NoSuchModelException noSuchModelException) {
				return null;
			}

			while (containerModel != null) {
				if (containerModel instanceof TrashedModel) {
					TrashedModel trashedModel = (TrashedModel)containerModel;

					return trashedModel.getTrashEntry();
				}

				trashHandler =
					com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil.
						getTrashHandler(
							trashHandler.getContainerModelClassName(
								containerModel.getContainerModelId()));

				if (trashHandler == null) {
					return null;
				}

				containerModel = trashHandler.getContainerModel(
					containerModel.getParentContainerModelId());
			}
		}

		return null;
	}

	@Override
	public long getTrashEntryClassPK() {
		return getPrimaryKey();
	}

	/**
	 * @deprecated As of Judson (7.1.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public com.liferay.portal.kernel.trash.TrashHandler getTrashHandler() {
		return com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil.
			getTrashHandler(getModelClassName());
	}

	@Override
	public boolean isInTrash() {
		if (getStatus() == WorkflowConstants.STATUS_IN_TRASH) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInTrashContainer() {
		com.liferay.portal.kernel.trash.TrashHandler trashHandler =
			getTrashHandler();

		if ((trashHandler == null) ||
			Validator.isNull(
				trashHandler.getContainerModelClassName(getPrimaryKey()))) {

			return false;
		}

		try {
			ContainerModel containerModel =
				trashHandler.getParentContainerModel(this);

			if (containerModel == null) {
				return false;
			}

			if (containerModel instanceof TrashedModel) {
				return ((TrashedModel)containerModel).isInTrash();
			}
		}
		catch (Exception exception) {
		}

		return false;
	}

	@Override
	public boolean isInTrashExplicitly() {
		if (!isInTrash()) {
			return false;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry =
			com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.
				fetchEntry(getModelClassName(), getTrashEntryClassPK());

		if (trashEntry != null) {
			return true;
		}

		return false;
	}

	@Override
	public boolean isInTrashImplicitly() {
		if (!isInTrash()) {
			return false;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry =
			com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.
				fetchEntry(getModelClassName(), getTrashEntryClassPK());

		if (trashEntry != null) {
			return false;
		}

		return true;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), StructuredData.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StructuredData toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, StructuredData>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StructuredDataImpl structuredDataImpl = new StructuredDataImpl();

		structuredDataImpl.setUuid(getUuid());
		structuredDataImpl.setStructuredDataId(getStructuredDataId());
		structuredDataImpl.setGroupId(getGroupId());
		structuredDataImpl.setCompanyId(getCompanyId());
		structuredDataImpl.setUserId(getUserId());
		structuredDataImpl.setUserName(getUserName());
		structuredDataImpl.setCreateDate(getCreateDate());
		structuredDataImpl.setModifiedDate(getModifiedDate());
		structuredDataImpl.setStatus(getStatus());
		structuredDataImpl.setStatusByUserId(getStatusByUserId());
		structuredDataImpl.setStatusByUserName(getStatusByUserName());
		structuredDataImpl.setStatusDate(getStatusDate());
		structuredDataImpl.setDataCollectionId(getDataCollectionId());
		structuredDataImpl.setDataSetId(getDataSetId());
		structuredDataImpl.setDataTypeId(getDataTypeId());
		structuredDataImpl.setMultiple(isMultiple());
		structuredDataImpl.setStartIndex(getStartIndex());
		structuredDataImpl.setCount(getCount());
		structuredDataImpl.setFreezed(isFreezed());
		structuredDataImpl.setVerified(isVerified());
		structuredDataImpl.setComments(isComments());
		structuredDataImpl.setHistory(isHistory());
		structuredDataImpl.setData(getData());

		structuredDataImpl.resetOriginalValues();

		return structuredDataImpl;
	}

	@Override
	public int compareTo(StructuredData structuredData) {
		long primaryKey = structuredData.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof StructuredData)) {
			return false;
		}

		StructuredData structuredData = (StructuredData)object;

		long primaryKey = structuredData.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalUuid = _uuid;

		_originalGroupId = _groupId;

		_setOriginalGroupId = false;

		_originalCompanyId = _companyId;

		_setOriginalCompanyId = false;

		_originalUserId = _userId;

		_setOriginalUserId = false;

		_setModifiedDate = false;
		_originalStatus = _status;

		_setOriginalStatus = false;

		_originalDataCollectionId = _dataCollectionId;

		_setOriginalDataCollectionId = false;

		_originalDataSetId = _dataSetId;

		_setOriginalDataSetId = false;

		_originalDataTypeId = _dataTypeId;

		_setOriginalDataTypeId = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<StructuredData> toCacheModel() {
		StructuredDataCacheModel structuredDataCacheModel =
			new StructuredDataCacheModel();

		structuredDataCacheModel.uuid = getUuid();

		String uuid = structuredDataCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			structuredDataCacheModel.uuid = null;
		}

		structuredDataCacheModel.structuredDataId = getStructuredDataId();

		structuredDataCacheModel.groupId = getGroupId();

		structuredDataCacheModel.companyId = getCompanyId();

		structuredDataCacheModel.userId = getUserId();

		structuredDataCacheModel.userName = getUserName();

		String userName = structuredDataCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			structuredDataCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			structuredDataCacheModel.createDate = createDate.getTime();
		}
		else {
			structuredDataCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			structuredDataCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			structuredDataCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		structuredDataCacheModel.status = getStatus();

		structuredDataCacheModel.statusByUserId = getStatusByUserId();

		structuredDataCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = structuredDataCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			structuredDataCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			structuredDataCacheModel.statusDate = statusDate.getTime();
		}
		else {
			structuredDataCacheModel.statusDate = Long.MIN_VALUE;
		}

		structuredDataCacheModel.dataCollectionId = getDataCollectionId();

		structuredDataCacheModel.dataSetId = getDataSetId();

		structuredDataCacheModel.dataTypeId = getDataTypeId();

		structuredDataCacheModel.multiple = isMultiple();

		structuredDataCacheModel.startIndex = getStartIndex();

		structuredDataCacheModel.count = getCount();

		structuredDataCacheModel.freezed = isFreezed();

		structuredDataCacheModel.verified = isVerified();

		structuredDataCacheModel.comments = isComments();

		structuredDataCacheModel.history = isHistory();

		structuredDataCacheModel.data = getData();

		String data = structuredDataCacheModel.data;

		if ((data != null) && (data.length() == 0)) {
			structuredDataCacheModel.data = null;
		}

		return structuredDataCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<StructuredData, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<StructuredData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StructuredData, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((StructuredData)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<StructuredData, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<StructuredData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StructuredData, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((StructuredData)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, StructuredData>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					StructuredData.class, ModelWrapper.class);

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _structuredDataId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _dataCollectionId;
	private long _originalDataCollectionId;
	private boolean _setOriginalDataCollectionId;
	private long _dataSetId;
	private long _originalDataSetId;
	private boolean _setOriginalDataSetId;
	private long _dataTypeId;
	private long _originalDataTypeId;
	private boolean _setOriginalDataTypeId;
	private boolean _multiple;
	private long _startIndex;
	private int _count;
	private boolean _freezed;
	private boolean _verified;
	private boolean _comments;
	private boolean _history;
	private String _data;
	private long _columnBitmask;
	private StructuredData _escapedModel;

}