/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sx.icecap.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.sx.icecap.model.ActionHistory;
import com.sx.icecap.model.ActionHistoryModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ActionHistory service. Represents a row in the &quot;SX_ICECAP_ActionHistory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ActionHistoryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ActionHistoryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ActionHistoryImpl
 * @generated
 */
public class ActionHistoryModelImpl
	extends BaseModelImpl<ActionHistory> implements ActionHistoryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a action history model instance should use the <code>ActionHistory</code> interface instead.
	 */
	public static final String TABLE_NAME = "SX_ICECAP_ActionHistory";

	public static final Object[][] TABLE_COLUMNS = {
		{"actionHistoryId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"actionType", Types.VARCHAR}, {"actionBase", Types.VARCHAR},
		{"actionDataId", Types.BIGINT}, {"paramCode", Types.VARCHAR},
		{"actionCommand", Types.VARCHAR}, {"prevValue", Types.VARCHAR},
		{"modifiedValue", Types.VARCHAR}, {"comment_", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("actionHistoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("actionType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("actionBase", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("actionDataId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("paramCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("actionCommand", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("prevValue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifiedValue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comment_", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SX_ICECAP_ActionHistory (actionHistoryId LONG not null primary key,userId LONG,userName VARCHAR(75) null,createDate DATE null,actionType VARCHAR(75) null,actionBase VARCHAR(75) null,actionDataId LONG,paramCode VARCHAR(75) null,actionCommand VARCHAR(75) null,prevValue VARCHAR(75) null,modifiedValue VARCHAR(75) null,comment_ VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table SX_ICECAP_ActionHistory";

	public static final String ORDER_BY_JPQL =
		" ORDER BY actionHistory.actionHistoryId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SX_ICECAP_ActionHistory.actionHistoryId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long ACTIONBASE_COLUMN_BITMASK = 1L;

	public static final long ACTIONDATAID_COLUMN_BITMASK = 2L;

	public static final long ACTIONTYPE_COLUMN_BITMASK = 4L;

	public static final long PARAMCODE_COLUMN_BITMASK = 8L;

	public static final long ACTIONHISTORYID_COLUMN_BITMASK = 16L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public ActionHistoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _actionHistoryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setActionHistoryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _actionHistoryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ActionHistory.class;
	}

	@Override
	public String getModelClassName() {
		return ActionHistory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ActionHistory, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ActionHistory, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ActionHistory, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ActionHistory)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ActionHistory, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ActionHistory, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ActionHistory)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ActionHistory, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ActionHistory, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<ActionHistory, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ActionHistory, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ActionHistory, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ActionHistory, Object>>();
		Map<String, BiConsumer<ActionHistory, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ActionHistory, ?>>();

		attributeGetterFunctions.put(
			"actionHistoryId", ActionHistory::getActionHistoryId);
		attributeSetterBiConsumers.put(
			"actionHistoryId",
			(BiConsumer<ActionHistory, Long>)ActionHistory::setActionHistoryId);
		attributeGetterFunctions.put("userId", ActionHistory::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<ActionHistory, Long>)ActionHistory::setUserId);
		attributeGetterFunctions.put("userName", ActionHistory::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<ActionHistory, String>)ActionHistory::setUserName);
		attributeGetterFunctions.put(
			"createDate", ActionHistory::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<ActionHistory, Date>)ActionHistory::setCreateDate);
		attributeGetterFunctions.put(
			"actionType", ActionHistory::getActionType);
		attributeSetterBiConsumers.put(
			"actionType",
			(BiConsumer<ActionHistory, String>)ActionHistory::setActionType);
		attributeGetterFunctions.put(
			"actionBase", ActionHistory::getActionBase);
		attributeSetterBiConsumers.put(
			"actionBase",
			(BiConsumer<ActionHistory, String>)ActionHistory::setActionBase);
		attributeGetterFunctions.put(
			"actionDataId", ActionHistory::getActionDataId);
		attributeSetterBiConsumers.put(
			"actionDataId",
			(BiConsumer<ActionHistory, Long>)ActionHistory::setActionDataId);
		attributeGetterFunctions.put("paramCode", ActionHistory::getParamCode);
		attributeSetterBiConsumers.put(
			"paramCode",
			(BiConsumer<ActionHistory, String>)ActionHistory::setParamCode);
		attributeGetterFunctions.put(
			"actionCommand", ActionHistory::getActionCommand);
		attributeSetterBiConsumers.put(
			"actionCommand",
			(BiConsumer<ActionHistory, String>)ActionHistory::setActionCommand);
		attributeGetterFunctions.put("prevValue", ActionHistory::getPrevValue);
		attributeSetterBiConsumers.put(
			"prevValue",
			(BiConsumer<ActionHistory, String>)ActionHistory::setPrevValue);
		attributeGetterFunctions.put(
			"modifiedValue", ActionHistory::getModifiedValue);
		attributeSetterBiConsumers.put(
			"modifiedValue",
			(BiConsumer<ActionHistory, String>)ActionHistory::setModifiedValue);
		attributeGetterFunctions.put("comment", ActionHistory::getComment);
		attributeSetterBiConsumers.put(
			"comment",
			(BiConsumer<ActionHistory, String>)ActionHistory::setComment);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getActionHistoryId() {
		return _actionHistoryId;
	}

	@Override
	public void setActionHistoryId(long actionHistoryId) {
		_actionHistoryId = actionHistoryId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public String getActionType() {
		if (_actionType == null) {
			return "";
		}
		else {
			return _actionType;
		}
	}

	@Override
	public void setActionType(String actionType) {
		_columnBitmask |= ACTIONTYPE_COLUMN_BITMASK;

		if (_originalActionType == null) {
			_originalActionType = _actionType;
		}

		_actionType = actionType;
	}

	public String getOriginalActionType() {
		return GetterUtil.getString(_originalActionType);
	}

	@Override
	public String getActionBase() {
		if (_actionBase == null) {
			return "";
		}
		else {
			return _actionBase;
		}
	}

	@Override
	public void setActionBase(String actionBase) {
		_columnBitmask |= ACTIONBASE_COLUMN_BITMASK;

		if (_originalActionBase == null) {
			_originalActionBase = _actionBase;
		}

		_actionBase = actionBase;
	}

	public String getOriginalActionBase() {
		return GetterUtil.getString(_originalActionBase);
	}

	@Override
	public long getActionDataId() {
		return _actionDataId;
	}

	@Override
	public void setActionDataId(long actionDataId) {
		_columnBitmask |= ACTIONDATAID_COLUMN_BITMASK;

		if (!_setOriginalActionDataId) {
			_setOriginalActionDataId = true;

			_originalActionDataId = _actionDataId;
		}

		_actionDataId = actionDataId;
	}

	public long getOriginalActionDataId() {
		return _originalActionDataId;
	}

	@Override
	public String getParamCode() {
		if (_paramCode == null) {
			return "";
		}
		else {
			return _paramCode;
		}
	}

	@Override
	public void setParamCode(String paramCode) {
		_columnBitmask |= PARAMCODE_COLUMN_BITMASK;

		if (_originalParamCode == null) {
			_originalParamCode = _paramCode;
		}

		_paramCode = paramCode;
	}

	public String getOriginalParamCode() {
		return GetterUtil.getString(_originalParamCode);
	}

	@Override
	public String getActionCommand() {
		if (_actionCommand == null) {
			return "";
		}
		else {
			return _actionCommand;
		}
	}

	@Override
	public void setActionCommand(String actionCommand) {
		_actionCommand = actionCommand;
	}

	@Override
	public String getPrevValue() {
		if (_prevValue == null) {
			return "";
		}
		else {
			return _prevValue;
		}
	}

	@Override
	public void setPrevValue(String prevValue) {
		_prevValue = prevValue;
	}

	@Override
	public String getModifiedValue() {
		if (_modifiedValue == null) {
			return "";
		}
		else {
			return _modifiedValue;
		}
	}

	@Override
	public void setModifiedValue(String modifiedValue) {
		_modifiedValue = modifiedValue;
	}

	@Override
	public String getComment() {
		if (_comment == null) {
			return "";
		}
		else {
			return _comment;
		}
	}

	@Override
	public void setComment(String comment) {
		_comment = comment;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ActionHistory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ActionHistory toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ActionHistory>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ActionHistoryImpl actionHistoryImpl = new ActionHistoryImpl();

		actionHistoryImpl.setActionHistoryId(getActionHistoryId());
		actionHistoryImpl.setUserId(getUserId());
		actionHistoryImpl.setUserName(getUserName());
		actionHistoryImpl.setCreateDate(getCreateDate());
		actionHistoryImpl.setActionType(getActionType());
		actionHistoryImpl.setActionBase(getActionBase());
		actionHistoryImpl.setActionDataId(getActionDataId());
		actionHistoryImpl.setParamCode(getParamCode());
		actionHistoryImpl.setActionCommand(getActionCommand());
		actionHistoryImpl.setPrevValue(getPrevValue());
		actionHistoryImpl.setModifiedValue(getModifiedValue());
		actionHistoryImpl.setComment(getComment());

		actionHistoryImpl.resetOriginalValues();

		return actionHistoryImpl;
	}

	@Override
	public int compareTo(ActionHistory actionHistory) {
		long primaryKey = actionHistory.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ActionHistory)) {
			return false;
		}

		ActionHistory actionHistory = (ActionHistory)object;

		long primaryKey = actionHistory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalActionType = _actionType;

		_originalActionBase = _actionBase;

		_originalActionDataId = _actionDataId;

		_setOriginalActionDataId = false;

		_originalParamCode = _paramCode;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ActionHistory> toCacheModel() {
		ActionHistoryCacheModel actionHistoryCacheModel =
			new ActionHistoryCacheModel();

		actionHistoryCacheModel.actionHistoryId = getActionHistoryId();

		actionHistoryCacheModel.userId = getUserId();

		actionHistoryCacheModel.userName = getUserName();

		String userName = actionHistoryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			actionHistoryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			actionHistoryCacheModel.createDate = createDate.getTime();
		}
		else {
			actionHistoryCacheModel.createDate = Long.MIN_VALUE;
		}

		actionHistoryCacheModel.actionType = getActionType();

		String actionType = actionHistoryCacheModel.actionType;

		if ((actionType != null) && (actionType.length() == 0)) {
			actionHistoryCacheModel.actionType = null;
		}

		actionHistoryCacheModel.actionBase = getActionBase();

		String actionBase = actionHistoryCacheModel.actionBase;

		if ((actionBase != null) && (actionBase.length() == 0)) {
			actionHistoryCacheModel.actionBase = null;
		}

		actionHistoryCacheModel.actionDataId = getActionDataId();

		actionHistoryCacheModel.paramCode = getParamCode();

		String paramCode = actionHistoryCacheModel.paramCode;

		if ((paramCode != null) && (paramCode.length() == 0)) {
			actionHistoryCacheModel.paramCode = null;
		}

		actionHistoryCacheModel.actionCommand = getActionCommand();

		String actionCommand = actionHistoryCacheModel.actionCommand;

		if ((actionCommand != null) && (actionCommand.length() == 0)) {
			actionHistoryCacheModel.actionCommand = null;
		}

		actionHistoryCacheModel.prevValue = getPrevValue();

		String prevValue = actionHistoryCacheModel.prevValue;

		if ((prevValue != null) && (prevValue.length() == 0)) {
			actionHistoryCacheModel.prevValue = null;
		}

		actionHistoryCacheModel.modifiedValue = getModifiedValue();

		String modifiedValue = actionHistoryCacheModel.modifiedValue;

		if ((modifiedValue != null) && (modifiedValue.length() == 0)) {
			actionHistoryCacheModel.modifiedValue = null;
		}

		actionHistoryCacheModel.comment = getComment();

		String comment = actionHistoryCacheModel.comment;

		if ((comment != null) && (comment.length() == 0)) {
			actionHistoryCacheModel.comment = null;
		}

		return actionHistoryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ActionHistory, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ActionHistory, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ActionHistory, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((ActionHistory)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ActionHistory, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ActionHistory, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ActionHistory, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ActionHistory)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ActionHistory>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ActionHistory.class, ModelWrapper.class);

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _actionHistoryId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private String _actionType;
	private String _originalActionType;
	private String _actionBase;
	private String _originalActionBase;
	private long _actionDataId;
	private long _originalActionDataId;
	private boolean _setOriginalActionDataId;
	private String _paramCode;
	private String _originalParamCode;
	private String _actionCommand;
	private String _prevValue;
	private String _modifiedValue;
	private String _comment;
	private long _columnBitmask;
	private ActionHistory _escapedModel;

}